<?php
namespace Baquaras\TestBundle\Security\User;

use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Baquaras\TestBundle\Entity\Utilisateur;
use Symfony\Component\DependencyInjection\Container;

use Doctrine\ORM\EntityRepository;

/**
 * UtilisateurRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UtilisateurRepository extends EntityRepository implements UserProviderInterface
{
    
    public function loadUserByUsername($username)
    {
        $role = null;
        $utilisateur = $this->findOneBy(array('cpteMatriculaire'=>$username));
        if(empty($utilisateur) ) {
             throw new UsernameNotFoundException(sprintf('Unable to find an user  in Baquaras with the compte matruclaire "%s".', $username));
        }
        switch ($utilisateur->getCpteMatriculaire()) {
            case 'Utilisateur non connecté':
                $role = 'ROLE_USER';
                breack;
            case 'Utilisateur non connecté':
                $role = 'ROLE_INTEGRATEUR';
                breack;
            case 'Lecteur avancé':
                $role = 'ROLE_LECTEUR';
                breack;
            case 'Technicien support':
                $role = 'ROLE_TECHNICIEN';
                breack;
            case 'Qualificateur':
                $role = 'ROLE_QUALIFICATEUR';
                breack;
            case 'Chef de produit':
                $role = 'ROLE_CHEF_PRODUIT';
                breack;
            case 'Responsable qualification':
                $role = 'ROLE_RESPONSABLE_QUALIF';
                breack;
            case 'Administrateur':
                $role = 'ROLE_SUPER_ADMIN';
                breack;
        }
        
        return new User($username, 'test', 'test', array($role));

    }

    public function refreshUser(UserInterface $user)
    {
        if (!$user instanceof User) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', get_class($user)));
        }

        return $this->loadUserByUsername($user->getUsername());
    }

    public function supportsClass($class)
    {
        return $class === 'Baquaras\TestBundle\Security\User\User';
    }
    
    
}

