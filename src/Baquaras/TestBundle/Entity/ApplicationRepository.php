<?php

namespace Baquaras\TestBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\Mapping\OrderBy;

/**
 * ApplicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ApplicationRepository extends EntityRepository
{

	public function findAllOrderedByName()
	{
	
		return $this->getEntityManager()
			->createQuery('SELECT app FROM BaquarasTestBundle:Application app ORDER BY app.id ASC'
			)
			->getResult();
	
	}
	
	public function findAppliJoin()
	{
		$builder = $this->createQueryBuilder('a', 'i', 'g')
			->join('a.installation','i')
			->join('a.gestion', 'g')
			->orderBy('a.nom', 'ASC');
 
		return $builder->getQuery()->getResult();
	}
	
	/**
     * Get the paginated list of published articles
     *
     * @param int $page
     * @param int $maxperpage
     * @param string $sortby
     * @return Paginator
     */
    public function getListe($page=1, $maxperpage=20)
    {

       $q = $this->createQueryBuilder('a', 'i')
			->join('a.installation','i')
			->orderBy('a.nom', 'ASC');

        $q->setFirstResult(($page-1) * $maxperpage)
            ->setMaxResults($maxperpage);

        return new Paginator($q);
	}
	
	/**
     * Get the paginated list of published articles
     *
     * @param int $page
     * @param int $maxperpage
     * @param string $sortby
     * @return Paginator
     */
	public function getListeLettre($lettre)
	{
		/*$qb = $this->createQueryBuilder('a', 'i', 'g')
			->join('a.installation','i')
			->join('a.gestion', 'g')
			->field($
			->orderBy('a.nom', 'ASC');
 
		return $builder->getQuery()->getResult();
		
*/
			
		$qb = $this->createQueryBuilder('a');
		$qb->where($qb->expr()->like('a.nom', ':nom'))
			->setParameter('nom','t*')
			->orderBy('a.nom', 'ASC')
			->getQuery()
			->getResult();
			
		return $qb;
	}
	
	public function countApplications()
	{
	    
        return $this->createQueryBuilder('id')
            ->select('COUNT(id)')
            ->getQuery()
            ->getSingleScalarResult()
        ;
    
	}
        
        /*
     * @param string $siera
     * @param string $siera
     * @return array
     */
    public function  createAppliInBaquaras($id_application_siera, $id_client_siera, $nom_application_siera, $dept_moa, $dept_users, $code_moa) //Ernest TCHOULOM 17-02-2015
    {
        //$sql = "CREATE OR REPLACE RULE vue_baquaras_insert AS ON INSERT TO vue_baquaras DO ALSO INSERT INTO vue_baquaras (id_baquaras, nom_application_siera) VALUES ($idBaquaras, '".$nomAppliBaquaras."')";      
        ////$sql = "INSERT INTO application(id, id_client_siera, nom_application_siera, dept_moa, dept_users, code_moa) VALUES ($id_application_siera, $id_client_siera, '".$nom_application_siera."', '".$dept_moa."', '".$dept_users."', '".$code_moa."')";      
        // $stmt = $this->connection->query($sql1);
        //$stmt = $this->connection->query($sql);
        //$stmt->bindValue(':invoice', $invoiceId);
        //Exec($sql);
       //$result = $sql->execute();
        //$qb = $this->createQueryBuilder('a');
        $this->getEntityManager()->createQueryBuilder()
        ->insert('application')
        ->values(
            array(
                'id' => '?',
                'id_client_siera' => '?',
                'nom_application_siera' => '?',
                'dept_moa' => '?',
                'dept_users' => '?',
                'code_moa' => '?'
            )
        )
        ->setParameter(0, $id_application_siera)
        ->setParameter(1, $id_client_siera)
        ->setParameter(0, $nom_application_siera)
        ->setParameter(1, $dept_moa)
        ->setParameter(0, $dept_users)
        ->setParameter(1, $code_moa)
         ;
        
       /*$query = $this->getEntityManager()->createQuery("INSERT INTO application(id, id_client_siera, nom_application_siera, dept_moa, dept_users, code_moa) VALUES ($id_application_siera, $id_client_siera, '".$nom_application_siera."', '".$dept_moa."', '".$dept_users."', '".$code_moa."')")
        ;
       $query->execute();*/

    }
    
    public function updateLastInsertedAppli($lastId,$newId)
    {
        $qB = $this->getEntityManager()->createQueryBuilder();
        $qB ->update('BaquarasTestBundle:Application', 'a')
            ->set('a.id', '?1')
            ->where('a.id = ?2')
            ->setParameter(1, $newId)
            ->setParameter(2, $lastId);
             $qB->getQuery()->execute();
    }


}
